name: MainPipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        run: |
          docker build . --tag ghcr.io/heppymon/mybot:latest
          docker run ghcr.io/heppymon/mybot:latest
          docker push ghcr.io/heppymon/mybot:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$GHA_DEPLOY_SSH_PRIVATE_KEY" > ../private.key
          sudo chmod 600 ../private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.GHA_DEPLOY_SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.GHA_KNOWN_HOSTS}}
          SSH_KEY_PATH: ${{ github.workspace }}/../private.key
      
      - uses: actions/checkout@v2
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.GHA_DEPLOY_IP }}
          username: ${{ secrets.GHA_DEPLOY_SSH_LOGIN }}
          key: ${{ secrets.GHA_DEPLOY_SSH_PRIVATE_KEY }}
          port: "22" # ${{ secrets.PORT }}
          source: "Server/"
          target: "~/tgbot"
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GHA_DEPLOY_SSH_PRIVATE_KEY }}
          
      - name: Disable Host key verification
        # Hack to prevent "Host key verification failed". Should be replaced with a ssh-keyscan based solution
        run: echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: multiple command
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.GHA_DEPLOY_IP }}
          username: ${{ secrets.GHA_DEPLOY_SSH_LOGIN }}
          key: ${{ secrets.GHA_DEPLOY_SSH_PRIVATE_KEY }}
          port: "22" # ${{ secrets.PORT }}
          script: |
            cd tgbot/Server
            docker compose --env-file botCore.env down
            docker compose --env-file botCore.env pull
            docker compose --env-file botCore.env up --build --force-recreate -d
