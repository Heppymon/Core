worker_processes 4;
events 
{
  worker_connections 1024; 
}

http {
  include /etc/nginx/mime.types;
  index index.html;

  upstream snt {
    server tgbotsnt:4443;
  }
  
  upstream back {
    server tgbotback:8443;
  }

  upstream front {
    server tgbotfront:1234;
  }

  upstream logs {
    server tgbotlogs:8888;

    keepalive 10;              # Number of connections to keep alive and recycle
    keepalive_requests 100;    # Number of requests to serve through one connection
    keepalive_timeout 1d;      # Time to keep idle connection open
}

  server {
    listen 444; # old 443 config ppart
    server_name xn----dtbjtmibsdh5h.xn--p1ai; # snt-vysokoe.rf
    proxy_read_timeout 1m;
    proxy_buffering off;
    ignore_invalid_headers off;

    location / {
      include /etc/nginx/mime.types;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
      
      proxy_pass http://snt;
    }
  }

  server {
    listen 444; # old 443 config ppart
    server_name myzdrikov.ru;
    proxy_read_timeout 1m;
    proxy_buffering off;
    ignore_invalid_headers off;

    
    location ^~ /logs {
      
      tcp_nodelay             on;

      proxy_cache             off;
      proxy_redirect          off;
      proxy_buffering         off;
      proxy_request_buffering off;

      proxy_set_header        Proxy "";
      send_timeout            1d;
      proxy_read_timeout      1d;
      proxy_send_timeout      1d;
      proxy_connect_timeout   5;
      keepalive_requests      100;
      keepalive_timeout       1d;

    # Should refer to name of upstream block
      proxy_pass              http://logs;
    }


    location /static/ {
      proxy_pass http://back/static/;
    }

    location /swagger/ {
      proxy_pass http://back/swagger/;
    }

    location /api/ {
      proxy_set_header Request-Source "client";
      proxy_pass http://back/api/;
    }

    location / {
      include /etc/nginx/mime.types;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
      
      proxy_pass http://front;
    }
  }
}
